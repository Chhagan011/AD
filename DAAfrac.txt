#include <iostream>

using namespace std;

struct item
{
    int id;
    float weight;
    float profit;
    float density; // profit/weight
};

void BubbleSort(item arr[], int n)
{
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (arr[j].density < arr[j + 1].density)
            {
                float tempDensity = arr[j].density;
                arr[j].density = arr[j + 1].density;
                arr[j + 1].density = tempDensity;

                float tempWeight = arr[j].weight;
                arr[j].weight = arr[j + 1].weight;
                arr[j + 1].weight = tempWeight;

                float tempProfit = arr[j].profit;
                arr[j].profit = arr[j + 1].profit;
                arr[j + 1].profit = tempProfit;

                int tempID = arr[j].id;
                arr[j].id = arr[j + 1].id;
                arr[j + 1].id = tempID;
            }
        }
    }
}

void DisplayItems(item arr[], int n)
{
    cout << "ID\tWeight\tProfit\tDensity\n";
    for (int i = 0; i < n; i++)
    {
        cout << arr[i].id << "\t" << arr[i].weight << "\t" << arr[i].profit << "\t" << arr[i].density << endl;
    }
}

void FractionalKnapsack(item arr[], int n, int KnapSackWeight)
{
    BubbleSort(arr, n);

    float totalWeight = 0;
    float totalProfit = 0;

    cout << "Items selected\n";
    cout << "ID\tWeight\tProfit\tSelection\n";
    bool selected[n] = {false}; // Initialize selection status for all items to false

    for (int i = 0; i < n; i++)
    {
        if (totalWeight + arr[i].weight <= KnapSackWeight)
        {
            totalWeight += arr[i].weight;
            totalProfit += arr[i].profit;
            selected[i] = true; // Mark item as selected
            cout << arr[i].id << "\t" << arr[i].weight << "\t" << arr[i].profit << "\t1" << endl;
        }
        else
        {
            float remainingWeight = KnapSackWeight - totalWeight;
            totalProfit += (arr[i].density * remainingWeight);
            cout << arr[i].id << "\t" << remainingWeight << "\t" << (arr[i].density * remainingWeight) << "\t1" << endl;
            totalWeight = KnapSackWeight;
            break;
        }
    }

    // Print 0 for items that were not selected
    for (int i = 0; i < n; i++)
    {
        if (!selected[i])
        {
            cout << arr[i].id << "\t" << arr[i].weight << "\t" << arr[i].profit << "\t0" << endl;
        }
    }

    cout << "\nTotal Weight in Knapsack >> " << totalWeight;
    cout << "\nTotal Profit >> " << totalProfit;
}

int main()
{
    int KnapSackWeight, totalItem;
    cout << "Enter the Weight of the Knapsack >> ";
    cin >> KnapSackWeight;
    cout << "Enter total No. of items >> ";
    cin >> totalItem;
    item arr[totalItem];
    for (int i = 0; i < totalItem; i++)
    {
        cout << "\nEnter the weight of item " << i + 1 << " >> ";
        cin >> arr[i].weight;
        cout << "Enter the profit of item " << i + 1 << " >> ";
        cin >> arr[i].profit;
        arr[i].id = i + 1;
        arr[i].density = arr[i].profit / arr[i].weight;
    }

    DisplayItems(arr, totalItem);

    FractionalKnapsack(arr, totalItem, KnapSackWeight);

    return 0;
}
